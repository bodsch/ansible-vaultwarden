#jinja2: trim_blocks: True, lstrip_blocks: True
# {{ ansible_managed }}

### Data folders

{% if vaultwarden_config.directories is defined and
      vaultwarden_config.directories | count > 0 %}
  {% for dir in ['data', 'icon_cache', 'attachments', 'sends', 'tmp', 'templates', 'web_vault'] %}
    {% if vaultwarden_config.directories[dir] is defined and
          vaultwarden_config.directories[dir] | string | length > 0 %}
      {%- set directory = vaultwarden_config.directories[dir] %}
      {% if dir == 'data' %}
DATA_FOLDER={{ directory }}
      {% endif %}
      {% if dir == 'icon_cache' %}
ICON_CACHE_FOLDER={{ directory }}
      {% endif %}
      {% if dir == 'attachments' %}
ATTACHMENTS_FOLDER={{ directory }}
      {% endif %}
      {% if dir == 'sends' %}
SENDS_FOLDER={{ directory }}
      {% endif %}
      {% if dir == 'tmp' %}
TMP_FOLDER={{ directory }}
      {% endif %}
      {% if dir == 'templates' %}
TEMPLATES_FOLDER={{ directory }}
      {% endif %}
      {% if dir == 'web_vault' %}
        {% if vaultwarden_config.web_vault.enabled is defined and
              vaultwarden_config.web_vault.enabled | string | length > 0 and
              vaultwarden_config.web_vault.enabled | bool == True %}
WEB_VAULT_FOLDER={{ directory }}/web-vault
        {% endif %}
      {% endif %}
    {% endif %}
  {% endfor %}
{% endif %}
{%if vaultwarden_config.templates.reload_enabled is defined and
     vaultwarden_config.templates.reload_enabled | string | length > 0 %}
RELOAD_TEMPLATES={{ vaultwarden_config.templates.reload_enabled | bool | bodsch.core.config_bool(true_as='true', false_as='false') }}
{% endif %}
{% if vaultwarden_config.web_vault.enabled is defined and
     vaultwarden_config.web_vault.enabled | string | length > 0 %}
WEB_VAULT_ENABLED={{ vaultwarden_config.web_vault.enabled | bool | bodsch.core.config_bool(true_as='true', false_as='false') }}
{% endif %}

### Database Settings

{% if vaultwarden_config.database.url is defined and
      vaultwarden_config.database.url | string | length > 0 %}
DATABASE_URL={{ vaultwarden_config.database.url }}
{% endif %}
{% if vaultwarden_config.database.enable_db_wal is defined and
      vaultwarden_config.database.enable_db_wal | string | length > 0 %}
ENABLE_DB_WAL={{ vaultwarden_config.database.enable_db_wal | bool | bodsch.core.config_bool(true_as='true', false_as='false') }}
{% endif %}
{% if vaultwarden_config.database.connection_retries is defined and
      vaultwarden_config.database.connection_retries | string | length > 0 %}
DB_CONNECTION_RETRIES={{ vaultwarden_config.database.connection_retries }}
{% endif %}
{% if vaultwarden_config.database.timeout is defined and
      vaultwarden_config.database.timeout | string | length > 0 %}
DATABASE_TIMEOUT={{ vaultwarden_config.database.timeout }}
{% endif %}
{% if vaultwarden_config.database.max_connections is defined and
      vaultwarden_config.database.max_connections | string | length > 0 %}
DATABASE_MAX_CONNS={{ vaultwarden_config.database.max_connections }}
{% endif %}
{% if vaultwarden_config.database.connection_init is defined and
      vaultwarden_config.database.connection_init | string | length > 0 %}
DATABASE_CONN_INIT={{ vaultwarden_config.database.connection_init }}
{% endif %}

### WebSocket

{% if vaultwarden_config.websocket.enabled is defined and
      vaultwarden_config.websocket.enabled | string | length > 0 %}
WEBSOCKET_ENABLED={{ vaultwarden_config.websocket.enabled | bool | bodsch.core.config_bool(true_as='true', false_as='false') }}
{% endif %}
{% if vaultwarden_config.websocket.enabled is defined and
      vaultwarden_config.websocket.enabled | string | length > 0 and
      vaultwarden_config.websocket.enabled %}
  {% if vaultwarden_config.websocket.address is defined and
        vaultwarden_config.websocket.address | string | length > 0 %}
WEBSOCKET_ADDRESS={{ vaultwarden_config.websocket.address }}
  {% endif %}
  {% if vaultwarden_config.websocket.port is defined and
        vaultwarden_config.websocket.port | string | length > 0 %}
WEBSOCKET_PORT={{ vaultwarden_config.websocket.port }}
  {% endif %}
{% endif %}

### Push notifications

{% if vaultwarden_config.push.enabled is defined and
      vaultwarden_config.push.enabled | string | length > 0 %}
PUSH_ENABLED={{ vaultwarden_config.push.enabled | bool | bodsch.core.config_bool(true_as='true', false_as='false') }}
{% endif %}
{% if vaultwarden_config.push.enabled is defined and
      vaultwarden_config.push.enabled | string | length > 0 and
      vaultwarden_config.push.enabled %}
  {% if vaultwarden_config.push.installation_id is defined and
        vaultwarden_config.push.installation_id | string | length > 0 %}
PUSH_INSTALLATION_ID={{ vaultwarden_config.push.installation_id }}
  {% endif %}
  {% if vaultwarden_config.push.installation_key is defined and
        vaultwarden_config.push.installation_key | string | length > 0 %}
PUSH_INSTALLATION_KEY={{ vaultwarden_config.push.installation_key }}
  {% endif %}
  {% if vaultwarden_config.push.relay_uri is defined and
        vaultwarden_config.push.relay_uri | string | length > 0 %}
PUSH_RELAY_URI={{ vaultwarden_config.push.relay_uri }}
  {% endif %}
  {% if vaultwarden_config.push.identity_uri is defined and
        vaultwarden_config.push.identity_uri | string | length > 0 %}
PUSH_IDENTITY_URI={{ vaultwarden_config.push.identity_uri }}
  {% endif %}
{% endif %}

### Schedule jobs

{% if vaultwarden_config.job.job_poll_interval_ms is defined and
      vaultwarden_config.job.job_poll_interval_ms | string | length > 0 %}
JOB_POLL_INTERVAL_MS={{ vaultwarden_config.job.job_poll_interval_ms }}
{% endif %}
{% if vaultwarden_config.job.send_purge_schedule is defined and
      vaultwarden_config.job.send_purge_schedule | string | length > 0 %}
SEND_PURGE_SCHEDULE={{ vaultwarden_config.job.send_purge_schedule }}
{% endif %}
{% if vaultwarden_config.job.trash_purge_schedule is defined and
      vaultwarden_config.job.trash_purge_schedule | string | length > 0 %}
TRASH_PURGE_SCHEDULE={{ vaultwarden_config.job.trash_purge_schedule }}
{% endif %}
{% if vaultwarden_config.job.incomplete_2fa_schedule is defined and
      vaultwarden_config.job.incomplete_2fa_schedule | string | length > 0 %}
INCOMPLETE_2FA_SCHEDULE={{ vaultwarden_config.job.incomplete_2fa_schedule }}
{% endif %}
{% if vaultwarden_config.job.emergency_notification_reminder_schedule is defined and
      vaultwarden_config.job.emergency_notification_reminder_schedule | string | length > 0 %}
EMERGENCY_NOTIFICATION_REMINDER_SCHEDULE={{ vaultwarden_config.job.emergency_notification_reminder_schedule }}
{% endif %}
{% if vaultwarden_config.job.emergency_request_timeout_schedule is defined and
      vaultwarden_config.job.emergency_request_timeout_schedule | string | length > 0 %}
EMERGENCY_REQUEST_TIMEOUT_SCHEDULE={{ vaultwarden_config.job.emergency_request_timeout_schedule }}
{% endif %}
{% if vaultwarden_config.job.event_cleanup_schedule is defined and
      vaultwarden_config.job.event_cleanup_schedule | string | length > 0 %}
EVENT_CLEANUP_SCHEDULE={{ vaultwarden_config.job.event_cleanup_schedule }}
{% endif %}
{% if vaultwarden_config.job.events_days_retain is defined and
      vaultwarden_config.job.events_days_retain | string | length > 0 %}
EVENTS_DAYS_RETAIN={{ vaultwarden_config.job.events_days_retain }}
{% endif %}
{% if vaultwarden_config.job.auth_request_purge_schedule is defined and
      vaultwarden_config.job.auth_request_purge_schedule | string | length > 0 %}
AUTH_REQUEST_PURGE_SCHEDULE={{ vaultwarden_config.job.auth_request_purge_schedule }}
{% endif %}

### General settings

{% if vaultwarden_config.global.domain is defined and
      vaultwarden_config.global.domain | string | length > 0 %}
DOMAIN={{ vaultwarden_config.global.domain }}
{% endif %}
{% if vaultwarden_config.global.sends_allowed is defined and
      vaultwarden_config.global.sends_allowed | string | length > 0 %}
SENDS_ALLOWED={{ vaultwarden_config.global.sends_allowed | bool | bodsch.core.config_bool(true_as='true', false_as='false') }}
{% endif %}
{% if vaultwarden_config.global.hibp_api_key is defined and
      vaultwarden_config.global.hibp_api_key | string | length > 0 %}
HIBP_API_KEY={{ vaultwarden_config.global.hibp_api_key }}
{% endif %}
{% if vaultwarden_config.global.org.attachment_limit is defined and
      vaultwarden_config.global.org.attachment_limit | string | length > 0 %}
ORG_ATTACHMENT_LIMIT={{ vaultwarden_config.global.org.attachment_limit }}
{% endif %}
{% if vaultwarden_config.global.org.events_enabled is defined and
      vaultwarden_config.global.org.events_enabled | string | length > 0 %}
ORG_EVENTS_ENABLED={{ vaultwarden_config.global.org.events_enabled | bool | bodsch.core.config_bool(true_as='true', false_as='false') }}
{% endif %}
{% if vaultwarden_config.global.org.creation_users is defined and
      vaultwarden_config.global.org.creation_users | count > 0 %}
ORG_CREATION_USERS={{ vaultwarden_config.global.org.creation_users | join(",") }}
{% endif %}
{% if vaultwarden_config.global.user.attachment_limit is defined and
      vaultwarden_config.global.user.attachment_limit | string | length > 0 %}
USER_ATTACHMENT_LIMIT={{ vaultwarden_config.global.user.attachment_limit }}
{% endif %}
{% if vaultwarden_config.global.user.send_limit is defined and
      vaultwarden_config.global.user.send_limit | string | length > 0 %}
USER_SEND_LIMIT={{ vaultwarden_config.global.user.send_limit }}
{% endif %}
{% if vaultwarden_config.global.trash_auto_delete_days is defined and
      vaultwarden_config.global.trash_auto_delete_days | string | length > 0 %}
TRASH_AUTO_DELETE_DAYS={{ vaultwarden_config.global.trash_auto_delete_days }}
{% endif %}
{% if vaultwarden_config.global.incomplete_2fa_time_limit is defined and
      vaultwarden_config.global.incomplete_2fa_time_limit | string | length > 0 %}
INCOMPLETE_2FA_TIME_LIMIT={{ vaultwarden_config.global.incomplete_2fa_time_limit }}
{% endif %}
{% if vaultwarden_config.global.disable_icon_download is defined and
      vaultwarden_config.global.disable_icon_download | string | length > 0 %}
DISABLE_ICON_DOWNLOAD={{ vaultwarden_config.global.disable_icon_download }}
{% endif %}
{% if vaultwarden_config.global.signups.allowed is defined and
      vaultwarden_config.global.signups.allowed | string | length > 0 %}
SIGNUPS_ALLOWED={{ vaultwarden_config.global.signups.allowed }}
{% endif %}
{% if vaultwarden_config.global.signups.verify is defined and
      vaultwarden_config.global.signups.verify | string | length > 0 %}
SIGNUPS_VERIFY={{ vaultwarden_config.global.signups.verify }}
{% endif %}
{% if vaultwarden_config.global.signups.verify_resend.time is defined and
      vaultwarden_config.global.signups.verify_resend.time | string | length > 0 %}
SIGNUPS_VERIFY_RESEND_TIME={{ vaultwarden_config.global.signups.verify_resend.time }}
{% endif %}
{% if vaultwarden_config.global.signups.verify_resend.limit is defined and
      vaultwarden_config.global.signups.verify_resend.limit | string | length > 0 %}
SIGNUPS_VERIFY_RESEND_LIMIT={{ vaultwarden_config.global.signups.verify_resend.limit }}
{% endif %}
{% if vaultwarden_config.global.signups.domains_whitelist is defined and
      vaultwarden_config.global.signups.domains_whitelist | count > 0 %}
SIGNUPS_DOMAINS_WHITELIST={{ vaultwarden_config.global.signups.domains_whitelist | join(",") }}
{% endif %}
{% if vaultwarden_config.global.invitations_allowed is defined and
      vaultwarden_config.global.invitations_allowed | string | length > 0 %}
INVITATIONS_ALLOWED={{ vaultwarden_config.global.invitations_allowed | bool | bodsch.core.config_bool(true_as='true', false_as='false') }}
{% endif %}
{% if vaultwarden_config.global.invitations.org_name is defined and
      vaultwarden_config.global.invitations.org_name | string | length > 0 %}
INVITATION_ORG_NAME={{ vaultwarden_config.global.invitations.org_name }}
{% endif %}
{% if vaultwarden_config.global.invitations.expiration_hours is defined and
      vaultwarden_config.global.invitations.expiration_hours | string | length > 0 %}
INVITATION_EXPIRATION_HOURS={{ vaultwarden_config.global.invitations.expiration_hours }}
{% endif %}
{% if vaultwarden_config.global.emergency_access_allowed is defined and
      vaultwarden_config.global.emergency_access_allowed | string | length > 0 %}
EMERGENCY_ACCESS_ALLOWED={{ vaultwarden_config.global.emergency_access_allowed | bool | bodsch.core.config_bool(true_as='true', false_as='false') }}
{% endif %}
{% if vaultwarden_config.global.email_change_allowed is defined and
      vaultwarden_config.global.email_change_allowed | string | length > 0 %}
EMAIL_CHANGE_ALLOWED={{ vaultwarden_config.global.email_change_allowed | bool | bodsch.core.config_bool(true_as='true', false_as='false') }}
{% endif %}
{% if vaultwarden_config.global.password.iterations is defined and
      vaultwarden_config.global.password.iterations | string | length > 0 %}
PASSWORD_ITERATIONS={{ vaultwarden_config.global.password.iterations }}
{% endif %}
{% if vaultwarden_config.global.password.hints_allowed is defined and
      vaultwarden_config.global.password.hints_allowed | string | length > 0 %}
PASSWORD_HINTS_ALLOWED={{ vaultwarden_config.global.password.hints_allowed | bool | bodsch.core.config_bool(true_as='true', false_as='false') }}
{% endif %}
{% if vaultwarden_config.global.show_password_hint is defined and
      vaultwarden_config.global.show_password_hint | string | length > 0 %}
SHOW_PASSWORD_HINT={{ vaultwarden_config.global.show_password_hint | bool | bodsch.core.config_bool(true_as='true', false_as='false') }}
{% endif %}

#########################
### Advanced settings ###
#########################

{#
## Client IP Header, used to identify the IP of the client, defaults to "X-Real-IP"
## Set to the string "none" (without quotes), to disable any headers and just use the remote IP
# IP_HEADER=X-Real-IP

## Icon service
## The predefined icon services are: internal, bitwarden, duckduckgo, google.
## To specify a custom icon service, set a URL template with exactly one instance of `{}`,
## which is replaced with the domain. For example: `https://icon.example.com/domain/{}`.
##
## `internal` refers to Vaultwarden's built-in icon fetching implementation.
## If an external service is set, an icon request to Vaultwarden will return an HTTP
## redirect to the corresponding icon at the external service. An external service may
## be useful if your Vaultwarden instance has no external network connectivity, or if
## you are concerned that someone may probe your instance to try to detect whether icons
## for certain sites have been cached.
# ICON_SERVICE=internal

## Icon redirect code
## The HTTP status code to use for redirects to an external icon service.
## The supported codes are 301 (legacy permanent), 302 (legacy temporary), 307 (temporary), and 308 (permanent).
## Temporary redirects are useful while testing different icon services, but once a service
## has been decided on, consider using permanent redirects for cacheability. The legacy codes
## are currently better supported by the Bitwarden clients.
# ICON_REDIRECT_CODE=302

## Cache time-to-live for successfully obtained icons, in seconds (0 is "forever")
## Default: 2592000 (30 days)
# ICON_CACHE_TTL=2592000
## Cache time-to-live for icons which weren't available, in seconds (0 is "forever")
## Default: 2592000 (3 days)
# ICON_CACHE_NEGTTL=259200

## Icon download timeout
## Configure the timeout value when downloading the favicons.
## The default is 10 seconds, but this could be to low on slower network connections
# ICON_DOWNLOAD_TIMEOUT=10

## Icon blacklist Regex
## Any domains or IPs that match this regex won't be fetched by the icon service.
## Useful to hide other servers in the local network. Check the WIKI for more details
## NOTE: Always enclose this regex withing single quotes!
# ICON_BLACKLIST_REGEX='^(192\.168\.0\.[0-9]+|192\.168\.1\.[0-9]+)$'

## Any IP which is not defined as a global IP will be blacklisted.
## Useful to secure your internal environment: See https://en.wikipedia.org/wiki/Reserved_IP_addresses for a list of IPs which it will block
# ICON_BLACKLIST_NON_GLOBAL_IPS=true

## Client Settings
## Enable experimental feature flags for clients.
## This is a comma-separated list of flags, e.g. "flag1,flag2,flag3".
##
## The following flags are available:
## - "autofill-overlay": Add an overlay menu to form fields for quick access to credentials.
## - "autofill-v2": Use the new autofill implementation.
## - "browser-fileless-import": Directly import credentials from other providers without a file.
## - "fido2-vault-credentials": Enable the use of FIDO2 security keys as second factor.
# EXPERIMENTAL_CLIENT_FEATURE_FLAGS=fido2-vault-credentials

## Require new device emails. When a user logs in an email is required to be sent.
## If sending the email fails the login attempt will fail!!
# REQUIRE_DEVICE_EMAIL=false
#}
{% if vaultwarden_config.logging.extended_logging is defined and
      vaultwarden_config.logging.extended_logging | string | length > 0 %}
EXTENDED_LOGGING={{ vaultwarden_config.logging.extended_logging | bool | bodsch.core.config_bool(true_as='true', false_as='false') }}
{% endif %}
{% if vaultwarden_config.logging.log_timestamp_format is defined and
      vaultwarden_config.logging.log_timestamp_format | string | length > 0 %}
LOG_TIMESTAMP_FORMAT="{{ vaultwarden_config.logging.log_timestamp_format }}"
{% endif %}
{% if vaultwarden_config.logging.use_syslog is defined and
      vaultwarden_config.logging.use_syslog | string | length > 0 %}
USE_SYSLOG={{ vaultwarden_config.logging.use_syslog | bool | bodsch.core.config_bool(true_as='true', false_as='false') }}
{% endif %}
{% if vaultwarden_config.logging.log_file is defined and
      vaultwarden_config.logging.log_file | string | length > 0 %}
LOG_FILE={{ vaultwarden_config.logging.log_file }}
{% endif %}
{% if vaultwarden_config.logging.log_level is defined and
      vaultwarden_config.logging.log_level | string | length > 0 and
      vaultwarden_config.logging.log_level in ["trace", "debug", "info", "warn", "error", "off"] %}
LOG_LEVEL={{ vaultwarden_config.logging.log_level }}
{% endif %}
{#
## Token for the admin interface, preferably an Argon2 PCH string
## Vaultwarden has a built-in generator by calling `vaultwarden hash`
## For details see: https://github.com/dani-garcia/vaultwarden/wiki/Enabling-admin-page#secure-the-admin_token
## If not set, the admin panel is disabled
## New Argon2 PHC string
## Note that for some environments, like docker-compose you need to escape all the dollar signs `$` with an extra dollar sign like `$$`
## Also, use single quotes (') instead of double quotes (") to enclose the string when needed
# ADMIN_TOKEN='$argon2id$v=19$m=65540,t=3,p=4$MmeKRnGK5RW5mJS7h3TOL89GrpLPXJPAtTK8FTqj9HM$DqsstvoSAETl9YhnsXbf43WeaUwJC6JhViIvuPoig78'
## Old plain text string (Will generate warnings in favor of Argon2)
# ADMIN_TOKEN=Vy2VyYTTsKPv8W5aEOWUbB/Bt3DEKePbHmI4m9VcemUMS2rEviDowNAFqYi1xjmp

## Enable this to bypass the admin panel security. This option is only
## meant to be used with the use of a separate auth layer in front
# DISABLE_ADMIN_TOKEN=false

## Number of seconds, on average, between admin login requests from the same IP address before rate limiting kicks in.
# ADMIN_RATELIMIT_SECONDS=300
## Allow a burst of requests of up to this size, while maintaining the average indicated by `ADMIN_RATELIMIT_SECONDS`.
# ADMIN_RATELIMIT_MAX_BURST=3

## Set the lifetime of admin sessions to this value (in minutes).
# ADMIN_SESSION_LIFETIME=20

## Allowed iframe ancestors (Know the risks!)
## https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors
## Allows other domains to embed the web vault into an iframe, useful for embedding into secure intranets
## This adds the configured value to the 'Content-Security-Policy' headers 'frame-ancestors' value.
## Multiple values must be separated with a whitespace.
# ALLOWED_IFRAME_ANCESTORS=

## Number of seconds, on average, between login requests from the same IP address before rate limiting kicks in.
# LOGIN_RATELIMIT_SECONDS=60
## Allow a burst of requests of up to this size, while maintaining the average indicated by `LOGIN_RATELIMIT_SECONDS`.
## Note that this applies to both the login and the 2FA, so it's recommended to allow a burst size of at least 2.
# LOGIN_RATELIMIT_MAX_BURST=10

## BETA FEATURE: Groups
## Controls whether group support is enabled for organizations
## This setting applies to organizations.
## Disabled by default because this is a beta feature, it contains known issues!
## KNOW WHAT YOU ARE DOING!
# ORG_GROUPS_ENABLED=false
#}

########################
### MFA/2FA settings ###
########################

{#
## Yubico (Yubikey) Settings
## Set your Client ID and Secret Key for Yubikey OTP
## You can generate it here: https://upgrade.yubico.com/getapikey/
## You can optionally specify a custom OTP server
# YUBICO_CLIENT_ID=11111
# YUBICO_SECRET_KEY=AAAAAAAAAAAAAAAAAAAAAAAA
# YUBICO_SERVER=http://yourdomain.com/wsapi/2.0/verify

## Duo Settings
## You need to configure all options to enable global Duo support, otherwise users would need to configure it themselves
## Create an account and protect an application as mentioned in this link (only the first step, not the rest):
## https://help.bitwarden.com/article/setup-two-step-login-duo/#create-a-duo-security-account
## Then set the following options, based on the values obtained from the last step:
# DUO_IKEY=<Integration Key>
# DUO_SKEY=<Secret Key>
# DUO_HOST=<API Hostname>
## After that, you should be able to follow the rest of the guide linked above,
## ignoring the fields that ask for the values that you already configured beforehand.

## Email 2FA settings
## Email token size
## Number of digits in an email 2FA token (min: 6, max: 255).
## Note that the Bitwarden clients are hardcoded to mention 6 digit codes regardless of this setting!
# EMAIL_TOKEN_SIZE=6
##
## Token expiration time
## Maximum time in seconds a token is valid. The time the user has to open email client and copy token.
# EMAIL_EXPIRATION_TIME=600
##
## Maximum attempts before an email token is reset and a new email will need to be sent.
# EMAIL_ATTEMPTS_LIMIT=3

## Other MFA/2FA settings
## Disable 2FA remember
## Enabling this would force the users to use a second factor to login every time.
## Note that the checkbox would still be present, but ignored.
# DISABLE_2FA_REMEMBER=false
##
## Authenticator Settings
## Disable authenticator time drifted codes to be valid.
## TOTP codes of the previous and next 30 seconds will be invalid
##
## According to the RFC6238 (https://tools.ietf.org/html/rfc6238),
## we allow by default the TOTP code which was valid one step back and one in the future.
## This can however allow attackers to be a bit more lucky with there attempts because there are 3 valid codes.
## You can disable this, so that only the current TOTP Code is allowed.
## Keep in mind that when a sever drifts out of time, valid codes could be marked as invalid.
## In any case, if a code has been used it can not be used again, also codes which predates it will be invalid.
# AUTHENTICATOR_DISABLE_TIME_DRIFT=false
#}

### SMTP Email settings

{% if vaultwarden_config.smtp.host is defined and
      vaultwarden_config.smtp.host | string | length > 0 %}
SMTP_HOST={{ vaultwarden_config.smtp.host }}
{% endif %}
{% if vaultwarden_config.smtp.from is defined and
      vaultwarden_config.smtp.from | string | length > 0 %}
SMTP_FROM={{ vaultwarden_config.smtp.from }}
{% endif %}
{% if vaultwarden_config.smtp.from_name is defined and
      vaultwarden_config.smtp.from_name | string | length > 0 %}
SMTP_FROM_NAME={{ vaultwarden_config.smtp.from_name }}
{% endif %}
{% if vaultwarden_config.smtp.username is defined and
      vaultwarden_config.smtp.username | string | length > 0 %}
SMTP_USERNAME={{ vaultwarden_config.smtp.username }}
{% endif %}
{% if vaultwarden_config.smtp.password is defined and
      vaultwarden_config.smtp.password | string | length > 0 %}
SMTP_PASSWORD={{ vaultwarden_config.smtp.password }}
{% endif %}
{% if vaultwarden_config.smtp.timeout is defined and
      vaultwarden_config.smtp.timeout | string | length > 0 %}
SMTP_TIMEOUT={{ vaultwarden_config.smtp.timeout }}
{% endif %}
{% if vaultwarden_config.smtp.security is defined and
      vaultwarden_config.smtp.security | string | length > 0 and
      vaultwarden_config.smtp.security in ["starttls", "force_tls", "off"] %}
  {% if vaultwarden_config.smtp.security == "starttls" %}
    {% set _smtp_port = 587 %}
  {% elif vaultwarden_config.smtp.security == "force_tls" %}
    {% set _smtp_port = 465 %}
  {% else %}
    {% set _smtp_port = 25 %}
  {% endif %}
SMTP_SECURITY={{ vaultwarden_config.smtp.security }}
{% endif %}
{% if _smtp_port is defined and
      _smtp_port | string | length > 0 %}
SMTP_PORT={{ _smtp_port }}
{% endif %}
{% if vaultwarden_config.smtp.use_sendmail is defined and
      vaultwarden_config.smtp.use_sendmail | string | length > 0 %}
USE_SENDMAIL={{ vaultwarden_config.smtp.use_sendmail | bool | bodsch.core.config_bool(true_as='true', false_as='false') }}
  {% if vaultwarden_config.smtp.use_sendmail and
        vaultwarden_config.smtp.sendmail_command is defined and
        vaultwarden_config.smtp.sendmail_command | string | length > 0 %}
SENDMAIL_COMMAND={{ vaultwarden_config.smtp.sendmail_command }}
  {% endif %}
{% endif %}
{% if vaultwarden_config.smtp.auth_mechanism is defined and
      vaultwarden_config.smtp.auth_mechanism | count > 0 and
      vaultwarden_config.smtp.auth_mechanism | valid_list_data(valid_entries=["Plain", "Login", "Xoauth2"]) %}
SMTP_AUTH_MECHANISM={{ vaultwarden_config.smtp.auth_mechanism | join(",") }}
{% endif %}
{% if vaultwarden_config.smtp.helo_name is defined and
      vaultwarden_config.smtp.helo_name | string | length > 0 %}
HELO_NAME={{ vaultwarden_config.smtp.helo_name }}
{% endif %}
{% if vaultwarden_config.smtp.embed_images is defined and
      vaultwarden_config.smtp.embed_images | string | length > 0 %}
SMTP_EMBED_IMAGES={{ vaultwarden_config.smtp.embed_images | bool | bodsch.core.config_bool(true_as='true', false_as='false') }}
{% endif %}
{% if vaultwarden_config.smtp.debug is defined and
      vaultwarden_config.smtp.debug | string | length > 0 %}
SMTP_DEBUG={{ vaultwarden_config.smtp.debug | bool | bodsch.core.config_bool(true_as='true', false_as='false') }}
{% endif %}
{% if vaultwarden_config.smtp.accept_invalid_certs is defined and
      vaultwarden_config.smtp.accept_invalid_certs | string | length > 0 %}
SMTP_ACCEPT_INVALID_CERTS={{ vaultwarden_config.smtp.accept_invalid_certs | bool | bodsch.core.config_bool(true_as='true', false_as='false') }}
{% endif %}
{% if vaultwarden_config.smtp.accept_invalid_hostnames is defined and
      vaultwarden_config.smtp.accept_invalid_hostnames | string | length > 0 %}
SMTP_ACCEPT_INVALID_HOSTNAMES={{ vaultwarden_config.smtp.accept_invalid_hostnames | bool | bodsch.core.config_bool(true_as='true', false_as='false') }}
{% endif %}

### Rocket settings

{% if vaultwarden_config.rocket.address is defined and
      vaultwarden_config.rocket.address | string | length > 0 %}
ROCKET_ADDRESS={{ vaultwarden_config.rocket.address }}
{% endif %}
{% if vaultwarden_config.rocket.port is defined and
      vaultwarden_config.rocket.port | string | length > 0 %}
ROCKET_PORT={{ vaultwarden_config.rocket.port }}
{% endif %}
{% if vaultwarden_config.rocket.tls is defined and
      vaultwarden_config.rocket.tls | string | length > 0 %}
  {% set rocket_tls = "" %}
  {% if vaultwarden_config.rocket.tls.certs is defined and
        vaultwarden_config.rocket.tls.certs | string | length > 0 %}
    {% set rocket_tls = 'certs="' + vaultwarden_config.rocket.tls.certs + '"' %}
  {% endif %}
  {% if rocket_tls | string | length > 0 %}
ROCKET_TLS={{ rocket_tls }}
  {% endif %}
{% endif %}
